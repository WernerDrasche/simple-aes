const std = @import("std");
const builtin = @import("builtin");
const native_endian = builtin.cpu.arch.endian();
const expect = std.testing.expect;
const assert = std.debug.assert;
const stdout = std.io.getStdOut().writer();

// zig fmt: off
const sbox: [256]u8 = .{
    // 0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,  // 0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,  // 1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,  // 2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,  // 3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,  // 4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,  // 5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,  // 6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,  // 7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,  // 8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,  // 9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,  // A
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,  // B
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,  // C
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,  // D
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,  // E
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,  // F
};

const sbox_inv: [256]u8 = .{
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
};

const rcon: [10][4]u8 = .{
    .{ 0x01, 0x00, 0x00, 0x00 },
    .{ 0x02, 0x00, 0x00, 0x00 },
    .{ 0x04, 0x00, 0x00, 0x00 },
    .{ 0x08, 0x00, 0x00, 0x00 },
    .{ 0x10, 0x00, 0x00, 0x00 },
    .{ 0x20, 0x00, 0x00, 0x00 },
    .{ 0x40, 0x00, 0x00, 0x00 },
    .{ 0x80, 0x00, 0x00, 0x00 },
    .{ 0x1b, 0x00, 0x00, 0x00 },
    .{ 0x36, 0x00, 0x00, 0x00 },
};

const from_exp: [255]u8 = .{
    0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13,
    0x35, 0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22,
    0x66, 0xaa, 0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90,
    0xab, 0xe6, 0x31, 0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8,
    0xd3, 0x6e, 0xb2, 0xcd, 0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1,
    0x08, 0x18, 0x28, 0x78, 0x88, 0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98,
    0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a, 0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b,
    0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3, 0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec,
    0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0, 0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7,
    0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41, 0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9,
    0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75, 0x9f, 0xba, 0xd5, 0x64, 0xac,
    0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80, 0x9b, 0xb6, 0xc1, 0x58,
    0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54, 0xfc, 0x1f, 0x21,
    0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca, 0x45, 0xcf,
    0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e, 0x12,
    0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17,
    0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6,
};

const to_exp: [255]u8 = .{
    0x00, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03,
    0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c,
    0xc1, 0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9,
    0x09, 0x78, 0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35,
    0x93, 0xda, 0x8e, 0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1,
    0x40, 0x46, 0x83, 0x38, 0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2,
    0x98, 0x22, 0x88, 0x91, 0x10, 0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b,
    0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba, 0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e,
    0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57, 0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74,
    0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8, 0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b,
    0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0, 0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4,
    0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7, 0xcc, 0xbb, 0x3e, 0x5a, 0xfb,
    0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d, 0x97, 0xb2, 0x87, 0x90,
    0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1, 0x53, 0x39, 0x84,
    0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab, 0x44, 0x11,
    0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5, 0x67,
    0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07,
};
// zig fmt: on

const Rotation = enum { left, right };

inline fn rotWord(w: [4]u8, n: u8, comptime rot: Rotation) [4]u8 {
    const ror = "rorl %%cl, %%eax";
    const rol = "roll %%cl, %%eax";
    const instr = switch (rot) {
        .left => if (native_endian == .Big) rol else ror,
        .right => if (native_endian == .Big) ror else rol,
    };
    var w32: u32 = @bitCast(w);
    w32 = asm (instr
        : [ret] "={eax}" (-> u32),
        : [w32] "{eax}" (w32),
          [n] "{cl}" (n * 8),
    );
    return @bitCast(w32);
}

inline fn subWord(w: [4]u8) [4]u8 {
    return .{ sbox[w[0]], sbox[w[1]], sbox[w[2]], sbox[w[3]] };
}

inline fn subWordInv(w: [4]u8) [4]u8 {
    return .{ sbox_inv[w[0]], sbox_inv[w[1]], sbox_inv[w[2]], sbox_inv[w[3]] };
}

inline fn xorWords(w1: [4]u8, w2: [4]u8) [4]u8 {
    const t1: u32 = @bitCast(w1);
    const t2: u32 = @bitCast(w2);
    return @bitCast(t1 ^ t2);
}

inline fn incCtr(ctr: *[16]u8) void {
    assert(ctr.len == 16);
    var w = std.mem.readIntBig(u128, ctr);
    std.mem.writeIntBig(u128, ctr, w + 1);
}

inline fn transpose(m: []const [4]u8) [4][4]u8 {
    assert(m.len == 4);
    return .{
        .{ m[0][0], m[1][0], m[2][0], m[3][0] },
        .{ m[0][1], m[1][1], m[2][1], m[3][1] },
        .{ m[0][2], m[1][2], m[2][2], m[3][2] },
        .{ m[0][3], m[1][3], m[2][3], m[3][3] },
    };
}

fn mul(a: u8, b: u8) u8 {
    if (a == 0 or b == 0)
        return 0;
    const ea = to_exp[a - 1];
    const eb = to_exp[b - 1];
    var eres: u16 = @as(u16, ea) + eb;
    if (eres >= 255) {
        eres -= 255;
    }
    return from_exp[eres];
}

pub const AES = struct {
    const max_rounds = 14;

    state: [4][4]u8,
    transposed: bool,
    keys: [4 * (max_rounds + 1)][4]u8,
    rounds: u8,
    kwords: u8,

    const Transposition = enum { cols, rows };
    const Self = @This();

    pub fn format(self: Self, comptime _: []const u8, _: std.fmt.FormatOptions, writer: anytype) std.os.WriteError!void {
        const state = if (self.transposed) transpose(&self.state) else self.state;
        for (state) |w| {
            for (w) |b| {
                try writer.print("{x:0>2} ", .{b});
            }
            try writer.writeByte('\n');
        }
    }

    ///trans = .cols -> rows become the former columns
    ///trans = .rows -> no transposition
    fn ensure(self: *Self, trans: Transposition) void {
        const t = switch (trans) {
            .cols => !self.transposed,
            .rows => self.transposed,
        };
        if (t) {
            self.state = transpose(&self.state);
            self.transposed = !self.transposed;
        }
    }

    fn eql(self: Self, other: [4][4]u8) bool {
        var m: usize = 0;
        var n: usize = 0;
        while (m < 4) : (m += 1) {
            while (n < 4) : (n += 1) {
                if (self.state[m][n] != other[m][n]) {
                    return false;
                }
            }
        }
        return true;
    }

    fn fill(self: *Self, data: *const [16]u8) void {
        for (data, 0..) |d, i| {
            self.state[i % 4][i / 4] = d;
        }
        self.transposed = false;
    }

    ///make sure that data is not transposed before calling
    ///after a normal encrypt/decrypt this is always the case
    fn copyOut(self: Self, data: []u8) void {
        assert(data.len == 16);
        assert(!self.transposed);
        var n: usize = 0;
        while (n < 4) : (n += 1) {
            var m: usize = 0;
            while (m < 4) : (m += 1) {
                data[n * 4 + m] = self.state[m][n];
            }
        }
    }

    pub fn installKey(self: *Self, comptime bytes: comptime_int, key: *const [bytes]u8) void {
        comptime assert(bytes & 0x3 == 0);
        const kwords = bytes / 4;
        switch (kwords) {
            4 => self.rounds = 10,
            6 => self.rounds = 12,
            8 => self.rounds = 14,
            else => @compileError("AES accepts only 16, 24 or 32 byte keys"),
        }
        self.kwords = kwords;
        var i: usize = 0;
        while (i < kwords) : (i += 1) {
            @memcpy(&self.keys[i], key[4 * i .. 4 * (i + 1)]);
        }
        // key expand
        while (i < 4 * (self.rounds + 1)) : (i += 1) {
            var tmp = self.keys[i - 1];
            if (i % kwords == 0) {
                tmp = subWord(rotWord(tmp, 1, .left));
                tmp[0] ^= rcon[i / kwords - 1][0];
            } else if (kwords > 6 and i % kwords == 4) {
                tmp = subWord(tmp);
            }
            self.keys[i] = xorWords(self.keys[i - kwords], tmp);
        }
    }

    fn addRoundKey(self: *Self, round: usize) void {
        self.ensure(.rows);
        const kcols = transpose(self.keys[4 * round .. 4 * (round + 1)]);
        var i: usize = 0;
        while (i < 4) : (i += 1) {
            self.state[i] = xorWords(self.state[i], kcols[i]);
        }
    }

    fn subBytes(self: *Self) void {
        for (self.state, 0..) |w, i| {
            self.state[i] = subWord(w);
        }
    }

    fn subBytesInv(self: *Self) void {
        for (self.state, 0..) |w, i| {
            self.state[i] = subWordInv(w);
        }
    }

    fn _shiftRows(self: *Self, comptime rot: Rotation) void {
        self.ensure(.rows);
        var i: u8 = 1;
        while (i < 4) : (i += 1) {
            self.state[i] = rotWord(self.state[i], i, rot);
        }
    }

    fn shiftRows(self: *Self) void {
        self._shiftRows(.left);
    }

    fn shiftRowsInv(self: *Self) void {
        self._shiftRows(.right);
    }

    fn mixColumns(self: *Self) void {
        self.ensure(.cols);
        const state = &self.state;
        var i: usize = 0;
        while (i < 4) : (i += 1) {
            var tmp: [4]u8 = undefined;
            // zig fmt: off
            tmp[0] = mul(state[i][0], 2) ^ mul(state[i][1], 3) ^ state[i][2]         ^ state[i][3];
            tmp[1] = state[i][0]         ^ mul(state[i][1], 2) ^ mul(state[i][2], 3) ^ state[i][3];
            tmp[2] = state[i][0]         ^ state[i][1]         ^ mul(state[i][2], 2) ^ mul(state[i][3], 3);
            tmp[3] = mul(state[i][0], 3) ^ state[i][1]         ^ state[i][2]         ^ mul(state[i][3], 2);
            // zig fmt: on
            state[i] = tmp;
        }
    }

    fn mixColumnsInv(self: *Self) void {
        self.ensure(.cols);
        const state = &self.state;
        var i: usize = 0;
        while (i < 4) : (i += 1) {
            var tmp: [4]u8 = undefined;
            // zig fmt: off
            tmp[0] = mul(state[i][0], 0xe) ^ mul(state[i][1], 0xb) ^ mul(state[i][2], 0xd) ^ mul(state[i][3], 0x9);
            tmp[1] = mul(state[i][0], 0x9) ^ mul(state[i][1], 0xe) ^ mul(state[i][2], 0xb) ^ mul(state[i][3], 0xd);
            tmp[2] = mul(state[i][0], 0xd) ^ mul(state[i][1], 0x9) ^ mul(state[i][2], 0xe) ^ mul(state[i][3], 0xb);
            tmp[3] = mul(state[i][0], 0xb) ^ mul(state[i][1], 0xd) ^ mul(state[i][2], 0x9) ^ mul(state[i][3], 0xe);
            // zig fmt: on
            state[i] = tmp;
        }
    }

    fn _encrypt(self: *Self, data: *const [16]u8, out: *[16]u8, comptime trace: bool) void {
        self.fill(data);
        if (trace) std.debug.print("round 0\n{}\n", .{self});
        self.addRoundKey(0);
        var round: u8 = 1;
        while (round < self.rounds) : (round += 1) {
            if (trace) std.debug.print("round {} (addRoundKey {})\n{}\n", .{ round, round - 1, self });
            self.subBytes();
            if (trace) std.debug.print("subBytes\n{}\n", .{self});
            self.shiftRows();
            if (trace) std.debug.print("shiftRows\n{}\n", .{self});
            self.mixColumns();
            if (trace) std.debug.print("mixColumns\n{}\n", .{self});
            self.addRoundKey(round);
        }
        if (trace) std.debug.print("round {} (addRoundKey {})\n{}\n", .{ round, round - 1, self });
        self.subBytes();
        if (trace) std.debug.print("subBytes\n{}\n", .{self});
        self.shiftRows();
        if (trace) std.debug.print("shiftRows\n{}\n", .{self});
        self.addRoundKey(round);
        if (trace) std.debug.print("final (addRoundKey {})\n{}\n", .{ round, self });
        self.copyOut(out);
    }

    pub fn encrypt(self: *Self, data: *const [16]u8, out: *[16]u8) void {
        self._encrypt(data, out, false);
    }

    fn _decrypt(self: *Self, data: *const [16]u8, out: *[16]u8, comptime trace: bool) void {
        self.fill(data);
        if (trace) std.debug.print("round {}\n{}\n", .{ self.rounds, self });
        self.addRoundKey(self.rounds);
        var round: u8 = self.rounds - 1;
        if (trace) std.debug.print("round {} (addRoundKey {})\n{}\n", .{ round, self.rounds, self });
        while (round >= 1) : (round -= 1) {
            self.shiftRowsInv();
            if (trace) std.debug.print("shiftRowsInv\n{}\n", .{self});
            self.subBytesInv();
            if (trace) std.debug.print("subBytesInv\n{}\n", .{self});
            self.addRoundKey(round);
            if (trace) std.debug.print("addRoundKey\n{}\n", .{self});
            self.mixColumnsInv();
            if (trace) std.debug.print("round {} (mixColumnsInv {})\n{}\n", .{ round - 1, round, self });
        }
        self.shiftRowsInv();
        if (trace) std.debug.print("shiftRowsInv\n{}\n", .{self});
        self.subBytesInv();
        if (trace) std.debug.print("subBytesInv\n{}\n", .{self});
        self.addRoundKey(0);
        if (trace) std.debug.print("final (addRoundKey 0)\n{}\n", .{self});
        self.copyOut(out);
    }

    pub fn decrypt(self: *Self, data: *const [16]u8, out: *[16]u8) void {
        self._decrypt(data, out, false);
    }

    ///asserts that out.len >= data.len + 16 (for padding)
    pub fn encryptECB(self: *Self, data: []const u8, out: []u8) usize {
        assert(out.len >= data.len + 16);
        const full_blocks_end = data.len & ~@as(usize, 0xf);
        const rest: u8 = @intCast(data.len & 0xf);
        var last: [16]u8 = undefined;
        var i: usize = 0;
        var end: usize = 0;
        while (i < full_blocks_end) : (i += 16) {
            end = i + 16;
            self.encrypt(@ptrCast(data[i..end]), @ptrCast(out[i..end]));
        }
        if (rest != 0) {
            const padding = 16 - rest;
            @memcpy(last[0..rest], data[end .. end + rest]);
            @memset(last[rest..], padding);
        } else {
            @memset(&last, 16);
        }
        self.encrypt(&last, @ptrCast(out[end .. end + 16]));
        return end + 16;
    }

    ///asserts that out.len >= data.len
    pub fn decryptECB(self: *Self, data: []const u8, out: []u8) !usize {
        assert(out.len >= data.len);
        if (data.len & 0xf != 0)
            return error.InvalidPadding;
        var i: usize = 0;
        var end: usize = 0;
        while (i < data.len) : (i += 16) {
            end = i + 16;
            self.decrypt(@ptrCast(data[i..end]), @ptrCast(out[i..end]));
        }
        const padding = out[end - 1];
        if (padding > 16)
            return error.InvalidPadding;
        return end - padding;
    }

    ///asserts that out.len >= data.len
    pub fn modeCTR(self: *Self, iv: *const [16]u8, data: []const u8, out: []u8) void {
        assert(out.len >= data.len);
        var ctr = iv.*;
        var key: [16]u8 = undefined;
        const n = (data.len + 15) & ~@as(usize, 0xf);
        var i: usize = 0;
        while (i < n) : (i += 16) {
            self.encrypt(&ctr, &key);
            const end = @min(16, data.len - i);
            var l: usize = 0;
            while (l < end) : (l += 1) {
                out[i + l] = data[i + l] ^ key[l];
            }
            incCtr(&ctr);
        }
    }

    test ensure {
        var state: AES = undefined;
        state.fill(&[_]u8{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 });
        const expected = [_][4]u8{ .{ 0, 1, 2, 3 }, .{ 4, 5, 6, 7 }, .{ 8, 9, 10, 11 }, .{ 12, 13, 14, 15 } };
        const expected2 = [_][4]u8{ .{ 0, 4, 8, 12 }, .{ 1, 5, 9, 13 }, .{ 2, 6, 10, 14 }, .{ 3, 7, 11, 15 } };
        state.ensure(.rows);
        try expect(state.eql(expected2));
        state.ensure(.cols);
        try expect(state.eql(expected));
        state.ensure(.cols);
        try expect(state.eql(expected));
        state.ensure(.rows);
        try expect(state.eql(expected2));
    }

    test fill {
        var state: AES = undefined;
        state.fill(&[_]u8{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 });
        const expected = [_][4]u8{ .{ 0, 4, 8, 12 }, .{ 1, 5, 9, 13 }, .{ 2, 6, 10, 14 }, .{ 3, 7, 11, 15 } };
        try expect(state.eql(expected));
    }

    test installKey {
        if (native_endian == .Big) return error.SkipZigTest;
        var s1: AES = undefined;
        s1.installKey(16, &.{ 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c });
        try expect(@byteSwap(@as(u32, @bitCast(s1.keys[43]))) == 0xb6630ca6);
        var s2: AES = undefined;
        s2.installKey(24, &.{ 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b });
        try expect(@byteSwap(@as(u32, @bitCast(s2.keys[51]))) == 0x01002202);
        var s3: AES = undefined;
        s3.installKey(32, &.{ 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 });
        try expect(@byteSwap(@as(u32, @bitCast(s3.keys[59]))) == 0x706c631e);
    }

    test addRoundKey {
        var state: AES = undefined;
        var data = [_]u8{ 0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34 };
        state.fill(&data);
        const key = [_]u8{ 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
        state.installKey(key.len, &key);
        state.addRoundKey(0);
        const expected = [_][4]u8{ .{ 0x19, 0xa0, 0x9a, 0xe9 }, .{ 0x3d, 0xf4, 0xc6, 0xf8 }, .{ 0xe3, 0xe2, 0x8d, 0x48 }, .{ 0xbe, 0x2b, 0x2a, 0x08 } };
        try expect(state.eql(expected));
    }

    test mixColumns {
        var state: AES = undefined;
        state.state = [_][4]u8{ .{ 0xd4, 0xe0, 0xb8, 0x1e }, .{ 0xbf, 0xb4, 0x41, 0x27 }, .{ 0x5d, 0x52, 0x11, 0x98 }, .{ 0x30, 0xae, 0xf1, 0xe5 } };
        state.transposed = false;
        state.mixColumns();
        state.ensure(.rows);
        const expected = [_][4]u8{ .{ 0x04, 0xe0, 0x48, 0x28 }, .{ 0x66, 0xcb, 0xf8, 0x06 }, .{ 0x81, 0x19, 0xd3, 0x26 }, .{ 0xe5, 0x9a, 0x7a, 0x4c } };
        try expect(state.eql(expected));
    }

    test "ECB" {
        var state: AES = undefined;
        var data = [_]u8{ 0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34 };
        const expected2 = data;
        const key = [_]u8{ 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
        state.installKey(key.len, &key);
        state.encrypt(&data, &data);
        state.ensure(.rows);
        const expected = [_][4]u8{ .{ 0x39, 0x02, 0xdc, 0x19 }, .{ 0x25, 0xdc, 0x11, 0x6a }, .{ 0x84, 0x09, 0x85, 0x0b }, .{ 0x1d, 0xfb, 0x97, 0x32 } };
        try expect(state.eql(expected));
        state.decrypt(&data, &data);
        try expect(std.mem.eql(u8, &data, &expected2));
    }

    test "CTR" {
        var state: AES = undefined;
        const data = "Hello World! This is a test.";
        state.installKey(16, &[_]u8{99} ** 16);
        var cipher: [data.len]u8 = undefined;
        const iv = [_]u8{0} ** 16;
        state.modeCTR(&iv, data, &cipher);
        state.modeCTR(&iv, &cipher, &cipher);
        try expect(std.mem.eql(u8, data, &cipher));
    }
};

pub fn main() !void {
    var state: AES = undefined;
    var data = [_]u8{ 0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34 };
    const key = [_]u8{ 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
    state.installKey(key.len, &key);
    state.encrypt(&data, &data);
    std.debug.print("{}\n", .{std.fmt.fmtSliceHexLower(&data)});
    state._decrypt(&data, &data, true);
    std.debug.print("{}\n", .{std.fmt.fmtSliceHexLower(&data)});
}

test mul {
    try expect(mul(0x57, 0x2) == 0xae);
    try expect(mul(0x57, 0x40) == 0x1c);
    try expect(mul(0x57, 0x80) == 0x38);
    try expect(mul(0x57, 0x13) == 0xfe);
}

test subWord {
    const res = subWord(.{ 0x19, 0xa0, 0x9a, 0xe9 });
    const expected = .{ 0xd4, 0xe0, 0xb8, 0x1e };
    try expect(std.mem.eql(u8, &res, &expected));
}

test rotWord {
    var res = rotWord(.{ 0, 1, 2, 3 }, 1, .left);
    const expected = .{ 1, 2, 3, 0 };
    try expect(std.mem.eql(u8, &res, &expected));
    res = rotWord(.{ 0, 1, 2, 3 }, 3, .left);
    const expected2 = .{ 3, 0, 1, 2 };
    try expect(std.mem.eql(u8, &res, &expected2));
}

test xorWords {
    const res = xorWords(.{ 0, 1, 2, 3 }, .{ 5, 6, 7, 8 });
    const expected = .{ 5, 7, 5, 11 };
    try expect(std.mem.eql(u8, &res, &expected));
}

test {
    _ = AES;
}
